"~/AntTofDataSciProject/golf.html")
download.file('http://www.lpga.com/statistics/money/official-money?year=2018', destfile=
"~/AntTofDataSciProject/golf.html")
?search
?grep
resp <- GET("http://www.lpga.com/statistics/money/official-money?year=2018")
library(httr)
resp <- GET("http://www.lpga.com/statistics/money/official-money?year=2018")
resp
grep("table", resp)
class(resp)
names(resp)
content <- content(resp, as = "raw")
content
content <- content(resp, as = "text")
content
grep("table", content)
grepl("table", content)
library(XML)
?getHTMLLinks
getHTMLLinks("golf.html")
getHTMLLinks("golf.html", xpQuery = "//a[contains('players','overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,c('players','overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players','overview')]/@href")
?contains
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players'&'overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[ends-with(@href,overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[ends-with(@href,'overview')]/@href")
install.packages(XPath)
install.packages("XPath)
install.packages("XPath")
library("XPath")
getHTMLLinks("golf.html", xpQuery = "//a[ends-with(@href,'overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players*overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players\*overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'\"players\"*\"overview\"')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'"players"*"overview"')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[ends-with(@href,'overview"')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[ends-with(@href,'overview"')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[ends-with(@href,'overview')]/@href")
library("XML")
getHTMLLinks("golf.html", xpQuery = "//a[ends-with(@href,'overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[ends_with(@href,'overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[ends-with(@href,'overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[substring-before(@href,'overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[substring-after(@href,'players')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[substring-after(@href,'/players')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[substring-after(@href,'/players/')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[substring(@href,6)]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[substring-after(@href,'/players/')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[substring-after(@href,'/players/')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'/players/')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'/players/overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[starts-with(@href,'/players/')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[ends-with(@href,'/players/')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[starts-with(@href,'/players/')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'/players/*')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'/players/'*)]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,''/players/'*')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'/players/')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'/players/') and contains(@href,'overview')]/@href")
getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
?strsplit
strsplit(playerProfileURLPath,"/")
playerNames <- strsplit(playerProfileURLPath,"/")[,3]
playerNames <- strsplit(playerProfileURLPath,"/")
playerNames <- unlist(strsplit(playerProfileURLPath,"/"))
playerNames <- as.data.frame(strsplit(playerProfileURLPath,"/"))
View(playerNames)
View(playerNames)
playerNames <- as.data.frame(strsplit(playerProfileURLPath,"/"))[4,]
playerNames <- as.data.frame(strsplit(playerProfileURLPath,"/"))[3,]
playerNames <- as.data.frame(strsplit(playerProfileURLPath,"/"))
names(playerNames)
names(playerNames) <- playerNames[3,]
playerNames
playerNames <- as.data.frame(strsplit(playerProfileURLPath,"/"))
playerNames <- as.data.frame(strsplit(playerProfileURLPath,"/")) [3:4,]
names(playerNames) <- [1,]
names(playerNames) <- playerNames[1,]
playerNames <- as.data.frame(strsplit(playerProfileURLPath,"/"),stringsAsFactors = FALSE) [3:4,]
names(playerNames) <- playerNames[1,]
row.names(playerNames) <- c("Name","ID")
?as.data.frame
playerNames <- as.data.frame(strsplit(playerProfileURLPath,"/"),stringsAsFactors = FALSE, row.names = c("Name","ID"), col.names = playerNames[1,]) [3:4,]
playerNames <- as.data.frame(strsplit(playerProfileURLPath,"/"),stringsAsFactors = FALSE, row.names = c("Name","ID"), col.names = playerNames[3,])
playerNames <- as.data.frame(strsplit(playerProfileURLPath,"/"),stringsAsFactors = FALSE) [3:4,]
row.names(playerNames) <- c("Name","ID")
names(playerNames) <- playerNames[1,]
download.file('http://www.lpga.com/statistics/money/official-money?year=2018', destfile=
"~/AntTofDataSciProject/golf.html")
# Players scraped in table
library("XML")
colTypes <- c("numeric","character","character","numeric")
players <- readHTMLTable("golf.html", colClasses = colTypes, stringsAsFactors = FALSE, as.data.frame = TRUE, which = 1)
str(players)
class(players)
# Converting official money to numeric
players$`Official Money`<- as.numeric(gsub("\\$|,","",players$`Official Money`))
str(players)
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
playerProfile <- as.data.frame(strsplit(playerProfileURLPath,"/"),stringsAsFactors = FALSE) [3:4,]
row.names(playerProfile) <- c("Name","ID")
names(playerProfile) <- playerNames[1,]
names(playerProfile) <- playerProfile[1,]
View(players)
cbind(players,playerProfile)
playerProfile <- t(as.data.frame(strsplit(playerProfileURLPath,"/"),stringsAsFactors = FALSE) [3:4,])
View(playerProfile)
t(strsplit(playerProfileURLPath,"/"))
strsplit(playerProfileURLPath,"/")
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=180),stringsAsFactors = FALSE) [,3:4]
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=180),stringsAsFactors = FALSE) [,3:4]
View(playerProfile)
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=180, byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
cbind(players,playerProfile)
View(players)
firstName <- strsplit(playerProfile$Name, "-")
firstName <- strsplit(playerProfile$Name, "-")[[]][1]
firstName <- strsplit(playerProfile$Name, "-")[[:]][1]
firstName <- strsplit(playerProfile$Name, "-")[1]
firstName <- strsplit(playerProfile$Name, "-")[:,1]
firstName <- strsplit(playerProfile$Name, "-")[,1]
firstName <- strsplit(playerProfile$Name, "-")
firstName <- matrix(strsplit(playerProfile$Name, "-"),nrow=180,byrow=TRUE)[,1]
firstName <- matrix(strsplit(playerProfile$Name, "-"),nrow=180,byrow=TRUE)[,1]
firstName <- matrix(strsplit(playerProfile$Name, "-"),nrow=180,byrow=TRUE)
firstName <- matrix(strsplit(playerProfile$Name, "-"),nrow=180,byrow=TRUE)
firstName <- matrix(strsplit(playerProfile$Name, "-"),nrow=180,byrow=TRUE)[1,]
firstName <- matrix(strsplit(playerProfile$Name, "-"),nrow=180,byrow=TRUE)
firstName <- matrix(strsplit(playerProfile$Name, "-"),nrow=180,byrow=TRUE)[,2]
firstName <- matrix(unlist(strsplit(playerProfile$Name, "-")),nrow=180,byrow=TRUE)[,1]
firstName <- strsplit(playerProfile$Name, "-")
lapply(firstName,attributes)
firstName[[]][1]
firstName[1]
firstName[[:]][1]
firstName[[1:180]][1]
firstName[[180]][1]
lapply(firstName, function(x) x[,1])
lapply(firstName, function(x) x[1])
sapply(firstName, function(x) x[1])
firstName <- sapply(firstName, function(x) x[1])
firstName[firstName!(firstName %in% players[,2])]
firstName[!(firstName %in% players[,2])]
firstName <- sapply(firstName, function(x) x[1])
firstName
firstName[!(firstName %in% players[,2])]
firstName[!(firstName %in% players[,2])]
View(playerProfile)
if(length(playerProfile) == length(players)){
print("Numbers match")
} else {
print("Number of players found is ", length(players)," while number of URLs is ",length(playerProfile))
}
length(playerProfile)
length(player)
length(players)
rowlength(players)
dim(players)
dim(players)[1]
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1])
}
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(c("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
print("Numbers match")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
playerProfile <- rbind(playerProfile[1:30,],c("wei-ling-hsu","98290"), playerProfile[-(1:30)])
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
playerProfile <- rbind(playerProfile[1:30,],c("wei-ling-hsu","98290"), playerProfile[-(1:30),])
players <- cbind(players,playerProfile[,2])
players <- cbind(players[,1],playerProfile[,2],players[,-1])
playerProfile <- rbind(playerProfile[1:30,],c("wei-ling-hsu","98290"), playerProfile[-(1:30),])
players <- cbind(players[,1],playerProfile[,2],players[,-1])
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
playerProfile <- rbind(playerProfile[1:30,],c("wei-ling-hsu","98290"), playerProfile[-(1:30),])
players <- cbind(players[,1],playerProfile[,2],players[,-1])
players <- readHTMLTable("golf.html", colClasses = colTypes, stringsAsFactors = FALSE, as.data.frame = TRUE, which = 1)
str(players)
class(players)
# Converting official money to numeric
players$`Official Money`<- as.numeric(gsub("\\$|,","",players$`Official Money`))
str(players)
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
playerProfile <- rbind(playerProfile[1:30,],c("wei-ling-hsu","98290"), playerProfile[-(1:30),])
players <- cbind(players[,1],playerProfile[,2],players[,-1])
download.file('http://www.lpga.com/statistics/money/official-money?year=2018', destfile=
"~/AntTofDataSciProject/golf.html")
# Players scraped in table
library("XML")
colTypes <- c("numeric","character","character","numeric")
players <- readHTMLTable("golf.html", colClasses = colTypes, stringsAsFactors = FALSE, as.data.frame = TRUE, which = 1)
str(players)
class(players)
# Converting official money to numeric
players$`Official Money`<- as.numeric(gsub("\\$|,","",players$`Official Money`))
str(players)
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
install.packages("DataCombine")
library(DataCombine)
playerProfile <- InsertRow(playerProfile,c("wei-ling-hsu","98290"), 31)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
library(dplyr)
library(dplyr)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
playerProfile <- add_row(playerProfile,c("wei-ling-hsu","98290"), .after=30)
playerProfile <- add_row(playerProfile,x=c("wei-ling-hsu","98290"), .after=30)
library(DataCombine)
playerProfile <- InsertRow(playerProfile,c("wei-ling-hsu","98290"), 31)
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
download.file('http://www.lpga.com/statistics/money/official-money?year=2018', destfile=
"~/AntTofDataSciProject/golf.html")
# Players scraped in table
library("XML")
colTypes <- c("numeric","character","character","numeric")
players <- readHTMLTable("golf.html", colClasses = colTypes, stringsAsFactors = FALSE, as.data.frame = TRUE, which = 1)
str(players)
class(players)
# Converting official money to numeric
players$`Official Money`<- as.numeric(gsub("\\$|,","",players$`Official Money`))
str(players)
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
library(DataCombine)
playerProfile <- InsertRow(playerProfile,c("wei-ling-hsu","98290"), 31)
players <- (players[,1],playerProfile[,2],players[,-1])
players <- colbind(players,playerProfile[,2])
players <- cbind(players,playerProfile[,2])
names(players[,5]) <- "ID"
names(players[,5]) <- c("ID")
players <- cbind(players,playerProfile[,2], colnames("ID"))
colnames(players[,5]) <- c("ID")
colnames(players[5]) <- c("ID")
library("tibble")
download.file('http://www.lpga.com/statistics/money/official-money?year=2018', destfile=
"~/AntTofDataSciProject/golf.html")
# Players scraped in table
library("XML")
colTypes <- c("numeric","character","character","numeric")
players <- readHTMLTable("golf.html", colClasses = colTypes, stringsAsFactors = FALSE, as.data.frame = TRUE, which = 1)
str(players)
class(players)
# Converting official money to numeric
players$`Official Money`<- as.numeric(gsub("\\$|,","",players$`Official Money`))
str(players)
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
library("tibble")
playerProfile <- add_row(playerProfile,c("wei-ling-hsu","98290"), .after=30)
playerProfile <- add_row(playerProfile,Name = c("wei-ling-hsu"),ID =c("98290"), .after=30)
players <- add_column(players,playerProfile[,2], .after = 1)
players <- add_column(players,as,numeric(playerProfile[,2]), .after = 1)
players <- add_column(players,as.numeric(playerProfile[,2]), .after = 1)
colnames(players[2]) <- c("ID")
rename(players[,2],c("ID"))
names(players)
players <- readHTMLTable("golf.html", colClasses = colTypes, stringsAsFactors = FALSE, as.data.frame = TRUE, which = 1)
str(players)
class(players)
# Converting official money to numeric
players$`Official Money`<- as.numeric(gsub("\\$|,","",players$`Official Money`))
str(players)
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
library("tibble")
playerProfile <- add_row(playerProfile,Name = c("wei-ling-hsu"),ID =c("98290"), .after=30)
players <- add_column(players,as.numeric(playerProfile[,2]), .after = 1)
names(players)[2] <- c("ID")
# Extracting Player Country
playerCountryImageURLPath <- getHTMLExternalFiles("golf.html", xpQuery = "//img[contains(@src,'countries')]/@src")
library(stringr)
str_match(playerCountryImageURLPath,"countries/(.*?).png")
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?).png")[,2])
playerCountries
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?)(.png|.gif)")[,2])
playerCountries
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?)(.png|.gif|.img)")[,2])
playerCountries
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?){3}")[,2])
playerCountries
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?{3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?).")[,2])
playerCountries
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?).")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?).img")[,2])
playerCountries
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?).png")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z])")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{1})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{2})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{4})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z{3}])")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z{1}])")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.3[a-z])")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.{3}[a-z])")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.[a-z]{1,3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{1,3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{1,3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z{1}])")[,2])
download.file('http://www.lpga.com/statistics/money/official-money?year=2018', destfile=
"~/AntTofDataSciProject/golf.html")
# Players scraped in table
library("XML")
colTypes <- c("numeric","character","character","numeric")
players <- readHTMLTable("golf.html", colClasses = colTypes, stringsAsFactors = FALSE, as.data.frame = TRUE, which = 1)
str(players)
class(players)
# Converting official money to numeric
players$`Official Money`<- as.numeric(gsub("\\$|,","",players$`Official Money`))
str(players)
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
library("tibble")
playerProfile <- add_row(playerProfile,Name = c("wei-ling-hsu"),ID =c("98290"), .after=30)
players <- add_column(players,as.numeric(playerProfile[,2]), .after = 1)
names(players)[2] <- c("ID")
str(players)
# Extracting Player Country
playerCountryImageURLPath <- getHTMLExternalFiles("golf.html", xpQuery = "//img[contains(@src,'countries')]/@src")
library(stringr)
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{1,3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]){1,3}")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]){1,3}")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{1,3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{1,2})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{1,3})")[,2])
playerCountries <- toupper(str_extract(playerCountryImageURLPath,"countries/(.*[a-z])")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]{3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z])")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*{3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?{3})")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?)")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?).[a-z]")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*?).[a-z]+")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]).[a-z]+")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]).[a-z]")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z])\.[a-z]")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z])")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z]).[a-z]+")[,2])
?grep
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z])\.[a-z]+")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z])\\.[a-z]+")[,2])
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z])\\.")[,2])
players <- add_column(players,playerCountries, .after = "Name")
names(players)["playerCountries"] <- c("Country")
names(players)[4] <- c("Country")
str(players)
remove_column()
players <- players[,-4]
players <- players[,-c("Country")]
players <- players[,-4]
players <- select(players,-c(4))
View(players)
download.file('http://www.lpga.com/statistics/money/official-money?year=2018', destfile=
"~/AntTofDataSciProject/golf.html")
# Players scraped in table
library("XML")
colTypes <- c("numeric","character","character","numeric")
players <- readHTMLTable("golf.html", colClasses = colTypes, stringsAsFactors = FALSE, as.data.frame = TRUE, which = 1)
str(players)
class(players)
# Converting official money to numeric
players$`Official Money`<- as.numeric(gsub("\\$|,","",players$`Official Money`))
str(players)
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
library("tibble")
playerProfile <- add_row(playerProfile,Name = c("wei-ling-hsu"),ID =c("98290"), .after=30)
players <- add_column(players,as.numeric(playerProfile[,2]), .after = 1)
names(players)[2] <- c("ID")
str(players)
# Extracting Player Country
playerCountryImageURLPath <- getHTMLExternalFiles("golf.html", xpQuery = "//img[contains(@src,'countries')]/@src")
library(stringr)
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z])\\.")[,2])
players <- add_column(players,as.factor(playerCountries), .after = "Name")
names(players)[4] <- c("Country")
str(players)
download.file('http://www.lpga.com/statistics/money/official-money?year=2018', destfile=
"~/GitHub/ieseDataSciProject/golf.html")
# Players scraped in table
library("XML")
colTypes <- c("numeric","character","character","numeric")
players <- readHTMLTable("golf.html", colClasses = colTypes, stringsAsFactors = FALSE, as.data.frame = TRUE, which = 1)
str(players)
class(players)
# Converting official money to numeric
players$`Official Money`<- as.numeric(gsub("\\$|,","",players$`Official Money`))
str(players)
# Extracting player ID
playerProfileURLPath <- getHTMLLinks("golf.html", xpQuery = "//a[contains(@href,'players') and contains(@href,'overview')]/@href")
playerProfile <- data.frame(matrix(unlist(strsplit(playerProfileURLPath,"/")),nrow=length(playerProfileURLPath), byrow = TRUE),stringsAsFactors = FALSE) [,3:4]
names(playerProfile) <- c("Name","ID")
if(dim(playerProfile)[1] == dim(players)[1]){
print("Numbers match")
} else {
print(paste("Number of players found is ", dim(players)[1]," while number of URLs is ",dim(playerProfile)[1]))
}
library("tibble")
playerProfile <- add_row(playerProfile,Name = c("wei-ling-hsu"),ID =c("98290"), .after=30)
players <- add_column(players,as.numeric(playerProfile[,2]), .after = 1)
names(players)[2] <- c("ID")
str(players)
# Extracting Player Country
playerCountryImageURLPath <- getHTMLExternalFiles("golf.html", xpQuery = "//img[contains(@src,'countries')]/@src")
library(stringr)
playerCountries <- toupper(str_match(playerCountryImageURLPath,"countries/(.*[a-z])\\.")[,2])
players <- add_column(players,as.factor(playerCountries), .after = "Name")
names(players)[4] <- c("Country")
str(players)
# Finding if there is a corellation between money and events played
library("ggplot2")
ggplot(data = players, mapping = aes(x=players$`Events Played`, y=players$`Official Money`)) +
geom_point() +
scale_y_log10()
cor(players$`Events Played`,players$`Official Money`)
# seems like there is a positive corellation between events played and money made
# seems like there is a positive corellation between events played and money made
setwd("~/GitHub/ieseDataSciProject")
